<web-app version="2.5" xsi:schemaLocation="https://www.oracle.com/webfolder/technetwork/jsc/xml/ns/javaee https://www.oracle.com/webfolder/technetwork/jsc/xml/ns/javaee/web-app_2_5.xsd" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <display-name>JasperServer UI application</display-name>
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>jasperserver.root</param-value>
  </context-param>
  <listener>
    <listener-class>com.jaspersoft.ji.adhoc.action.AdhocTempARUKiller</listener-class>
  </listener>
  <listener>
    <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
  </listener>
  <filter>
    <filter-name>log4jServletFilter</filter-name>
    <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>log4jServletFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
    <dispatcher>INCLUDE</dispatcher>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>ASYNC</dispatcher>
    <!--Servlet 3.0 w/ disabled auto-initialization only; not supported in 2.5-->
  </filter-mapping>
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <context-param>
    <param-name>log4jConfiguration</param-name>
    <param-value>/WEB-INF/log4j2.properties</param-value>
  </context-param>
  <!--listener to load the root application context-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext*.xml</param-value>
  </context-param>
  <context-param>
    <param-name>contextClass</param-name>
    <param-value>com.jaspersoft.jasperserver.war.util.JSWebApplicationContext</param-value>
  </context-param>
  <!--resources initializer-->
  <listener>
    <listener-class>com.tonbeller.tbutils.res.ResourcesFactoryContextListener</listener-class>
  </listener>
  <!--optional? now in JPivot by default-->
  <context-param>
    <param-name>contextFactory</param-name>
    <param-value>com.tonbeller.wcf.controller.RequestContextFactoryImpl</param-value>
  </context-param>
  <!--Close JDBC connections on end of session-->
  <listener>
    <listener-class>com.jaspersoft.jasperserver.war.OlapSessionKiller</listener-class>
  </listener>
  <!--SecurityContextHolder.setStrategyName(MODE_INHERITABLETHREADLOCAL)-->
  <listener>
    <listener-class>com.jaspersoft.jasperserver.war.util.SecurityContextHolderStrategyInitializer</listener-class>
  </listener>
  <listener>
    <display-name>Session mutex</display-name>
    <listener-class>org.springframework.web.util.HttpSessionMutexListener</listener-class>
  </listener>
  <listener>
    <listener-class>com.jaspersoft.jasperserver.war.util.SpringBeanServletContextPlublisher</listener-class>
  </listener>
  <listener>
    <listener-class>net.sf.jasperreports.phantomjs.PhantomJSServletContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  </listener>
  <!--SSO -  single sign out listener-->
  <listener>
    <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
  </listener>
  <!--XSS jsp ELResolver-->
  <listener>
    <listener-class>com.jaspersoft.jasperserver.jsp.XSSEscapeXmlELResolverListener</listener-class>
  </listener>
  <context-param>
    <param-name>sessionPublishedBeans</param-name>
    <param-value>configurationBean,concreteHeartbeatBean,concreteNavigationActionModelSupport</param-value>
  </context-param>
  <!--#### CSRFGuard Configuration ####-->
  <context-param>
    <param-name>Owasp.CsrfGuard.Config</param-name>
    <param-value>/WEB-INF/csrf/jrs.csrfguard.properties</param-value>
  </context-param>
  <!--Print CSRFGuard config in logs-->
  <context-param>
    <param-name>Owasp.CsrfGuard.Config.Print</param-name>
    <param-value>true</param-value>
  </context-param>
  <listener>
    <listener-class>org.owasp.csrfguard.CsrfGuardServletContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>com.jaspersoft.ji.war.common.FusionConfigListener</listener-class>
  </listener>
  <!--#### CSRFGuard Configuration END ####-->
  <filter>
    <description>Filter wraps request and response. If there are load balancer request headers that tell
            JRS the load balancer's protocol, address, port and prefix(context path)
            the requests would be redirected there. Otherwise, the
            request object server name, server port, and http protocol determine the redirect url.

            This filter should be the first one in the chain.</description>
    <filter-name>ForwardedHeaderFilter</filter-name>
    <filter-class>org.springframework.web.filter.ForwardedHeaderFilter</filter-class>
  </filter>
  <!--UNCOMMENT FOR SESSION REPLICATION-->
  <!--filter>
        <filter-name>ClusterFilter</filter-name>
        <filter-class>com.jaspersoft.jasperserver.war.TolerantSessionFilter</filter-class>
    </filter-->
  <!--UNCOMMENT FOR Glassfish 3 and above-->
  <!--filter>
        <filter-name>GlassFishFilter</filter-name>
        <filter-class>com.jaspersoft.jasperserver.war.GlassFishSessionFilter</filter-class>
    </filter-->
  <filter>
    <description>Add XSS Nonce to the session attributes.  This is done in a filter rather than in HttpSessionListener
            because of the Clustering.  If the session attribute is set in HttpSessionListener.sessionCreated, other
            nodes in the cluster would not pick it up.</description>
    <filter-name>SessionXssNonceSetterFilter</filter-name>
    <filter-class>com.jaspersoft.jasperserver.war.SessionXssNonceSetterFilter</filter-class>
  </filter>
  <filter>
    <filter-name>p3pFilter</filter-name>
    <filter-class>com.jaspersoft.jasperserver.war.P3PFilter</filter-class>
  </filter>
  <filter>
    <description>Filter controlling response headers.</description>
    <filter-name>resourceHTTPHeadersFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetFilterLifecycle</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>characterEncodingProxyFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>characterEncodingFilter</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>sessionDecoratorProxyFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>sessionDecoratorFilter</param-value>
    </init-param>
  </filter>
  <filter>
    <description>Put the request object into a ThreadLocal variable to make it accessible
            throughout the application.

            NOTE: This filter must be placed towards the end of the filter chain to make all
            the request attributes introduced in the filter chain available throughout the
            application (via RequestContextHolder.attributes.request).

            The filter was placed before sitemesh filter, because sitemesh renders pages after
            chain.doFilter.  RequestContextFilter destroys RequestContextHolder on exit.
            If we placed RequestContextFilter after sitemesh, the pages would not be able to access
            RequestContextHolder.attributes.request.</description>
    <filter-name>RequestContextFilter</filter-name>
    <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
    <init-param>
      <description>This paramter makes Request object available to the children threads</description>
      <param-name>threadContextInheritable</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <!--RequestContextFilter must come before securityFilter.
         RequestContextFilter sets a Locale from 'accept-language' header,
         but the Locale is expected to be set via 'userLocale' cookie which is handled by UserPerferenceFilter (it comes from securityFilter).-->
  <filter>
    <filter-name>securityFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>authenticationAuthoirizationFilterChainProxy</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>DiagnosticLoggingFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>diagnosticLoggingFilter</param-value>
    </init-param>
  </filter>
  <!--This filter must come AFTER securityFilter as it relies on SecurityContext set there.-->
  <filter>
    <filter-name>CrossDomainFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>crossDomainFilter</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>CorsFilter</filter-name>
    <filter-class>com.jaspersoft.jasperserver.api.security.csrf.CorsFilter</filter-class>
  </filter>
  <!--This filter must come AFTER securityFilter to prevent CSRF protection on the login page-->
  <filter>
    <filter-name>CsrfGuardFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>csrfGuardFilter</param-value>
    </init-param>
  </filter>
  <filter>
    <filter-name>SwitchUserProcessingFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <init-param>
      <param-name>targetBeanName</param-name>
      <param-value>switchUserProcessingFilter</param-value>
    </init-param>
  </filter>
  <!--Start of SiteMesh filter config-->
  <filter>
    <filter-name>sitemesh</filter-name>
    <filter-class>com.opensymphony.module.sitemesh.filter.PageFilter</filter-class>
  </filter>
  <filter>
    <filter-name>JPivotController</filter-name>
    <!--<filter-class>com.jaspersoft.jasperserver.war.JPivotRequestFilter</filter-class>-->
    <filter-class>com.tonbeller.wcf.controller.RequestFilter</filter-class>
    <!--to avoid double clicking problem in the OLAP view list
            <init-param>
              <param-name>indexJSP</param-name>
              <param-value>/olap/viewOlap.html</param-value>
              <description>forward to this page if session is new</description>
            </init-param>-->
    <init-param>
      <description>URI of error page</description>
      <param-name>errorJSP</param-name>
      <param-value>/olap/error.html</param-value>
    </init-param>
    <init-param>
      <description>This page is displayed if a the user clicks
                on a query before the previous query has finished</description>
      <param-name>busyJSP</param-name>
      <param-value>/olap/busy.html</param-value>
    </init-param>
    <!--<init-param>
          <param-name>forceExtension</param-name>
          <param-value>.faces</param-value>
          <description>replace .jsp with .faces</description>
        </init-param>-->
  </filter>
  <filter>
    <filter-name>fusionSWFResponseHeadersFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>fusionSWFResponseHeadersFilter</filter-name>
    <url-pattern>/fusion/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>ForwardedHeaderFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--UNCOMMENT FOR SESSION REPLICATION-->
  <!--filter-mapping>
        <filter-name>ClusterFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
	<distributable/-->
  <!--UNCOMMENT FOR GlassFish 3 and above-->
  <!--filter-mapping>
      <filter-name>GlassFishFilter</filter-name>
      <url-pattern>/*</url-pattern>
    </filter-mapping-->
  <filter-mapping>
    <filter-name>p3pFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>SessionXssNonceSetterFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>resourceHTTPHeadersFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>characterEncodingProxyFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>sessionDecoratorProxyFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>RequestContextFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>
  <!--RequestContextFilter must come before securityFilter.
         RequestContextFilter sets a Locale from 'accept-language' header,
         but the Locale is expected to be set via 'userLocale' cookie which is handled by UserPerferenceFilter (it comes from securityFilter).-->
  <filter-mapping>
    <filter-name>securityFilter</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>REQUEST</dispatcher>
  </filter-mapping>
  <filter-mapping>
    <filter-name>DiagnosticLoggingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!--This filter must come AFTER securityFilter as it relies on SecurityContext set there.-->
  <filter-mapping>
    <filter-name>CrossDomainFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>*.woff</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>*.woff2</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>*.ttf</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>*.svg</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CorsFilter</filter-name>
    <url-pattern>*.eot</url-pattern>
  </filter-mapping>
  <!--This filter must come AFTER securityFilter to prevent CSRF protection on the login page-->
  <filter-mapping>
    <filter-name>CsrfGuardFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>SwitchUserProcessingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>sitemesh</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>ERROR</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>
  <!--Filter to help parse the file name and extension of uplaoded files-->
  <!--filter>  com.jaspersoft.jasperserver.war.MultipartRequestWrapperFilter takes over the processing
        <filter-name>multiPartHelperFilter</filter-name>
        <filter-class>com.jaspersoft.jasperserver.war.common.UploadMultipartFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>multiPartHelperFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping-->
  <filter-mapping>
    <filter-name>JPivotController</filter-name>
    <url-pattern>/olap/viewOlap.html</url-pattern>
  </filter-mapping>
  <!--dispatcher servlet for the application-->
  <servlet>
    <servlet-name>jasperserver</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/jasperserver-*.xml</param-value>
    </init-param>
    <init-param>
      <param-name>threadContextInheritable</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/flow.html/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/fileview/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/reportimage/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/reportresource/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/jrpxml/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/client/visualize.js</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>jasperserver</servlet-name>
    <url-pattern>/themeMinimalCss.css</url-pattern>
  </servlet-mapping>
  <!--MondrianXmlaServlet replaced with JasperXmlaServlet-->
  <!--<servlet>
    <servlet-name>MondrianXmlaServlet</servlet-name>
    <servlet-class>mondrian.xmla.impl.DefaultXmlaServlet</servlet-class>
    <init-param>
      <param-name>DataSourcesConfig</param-name>
      <param-value>datasources.xml</param-value>
    </init-param>
  </servlet>-->
  <!--XML for Analysis Servlet-->
  <servlet>
    <servlet-name>JasperXmlaServlet</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.war.xmla.XmlaServletImpl</servlet-class>
    <load-on-startup>50</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>JasperXmlaServlet</servlet-name>
    <url-pattern>/xmla</url-pattern>
  </servlet-mapping>
  <!--for drillthrough-->
  <servlet>
    <servlet-name>JasperDrillThroughServlet</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.war.CSVServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>JasperDrillThroughServlet</servlet-name>
    <url-pattern>/olap/drillthrough.csv</url-pattern>
  </servlet-mapping>
  <!--jfreechart provided servlet-->
  <servlet>
    <servlet-name>DisplayChart</servlet-name>
    <servlet-class>org.jfree.chart.servlet.DisplayChart</servlet-class>
  </servlet>
  <!--jfreechart provided servlet-->
  <servlet>
    <description>Serves up chart images for OLAP printing to PDF and Excel.</description>
    <servlet-name>GetChart</servlet-name>
    <!--display-name>GetChart</display-name-->
    <servlet-class>com.jaspersoft.jasperserver.war.OlapGetChart</servlet-class>
  </servlet>
  <servlet>
    <description>Generate PDF and Excel files for download based on OLAP model.</description>
    <servlet-name>Print</servlet-name>
    <!--display-name>Print</display-name-->
    <!--Use JPivot PrintServlet which has been customized-->
    <servlet-class>com.tonbeller.jpivot.print.PrintServlet</servlet-class>
    <!--<servlet-class>com.jaspersoft.jasperserver.war.OlapPrint</servlet-class>-->
  </servlet>
  <servlet-mapping>
    <servlet-name>DisplayChart</servlet-name>
    <url-pattern>/DisplayChart</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>Print</servlet-name>
    <url-pattern>/olap/Print</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>GetChart</servlet-name>
    <url-pattern>/GetChart</url-pattern>
  </servlet-mapping>
  <!--REST support START-->
  <servlet>
    <servlet-name>JerseyREST</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.jaxrs.JrsJerseyServletContainer</servlet-class>
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>com.jaspersoft.jasperserver.jaxrs.RestSpringApplication</param-value>
    </init-param>
    <init-param>
      <param-name>com.sun.jersey.config.property.packages</param-name>
      <param-value>
        com.jaspersoft.ji.jaxrs.adhoc
                com.jaspersoft.ji.jaxrs.query
                com.jaspersoft.ji.jaxrs.common
                com.jaspersoft.jasperserver.jaxrs.common
                com.jaspersoft.ji.adhoc_engine.rest
        <!--Jackson 2.x JAX-RS @Providers-->
        <!--com.fasterxml.jackson.jaxrs.json-->
      </param-value>
    </init-param>
    <init-param>
      <param-name>com.sun.jersey.config.property.classname</param-name>
      <param-value>class com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider,
                class com.fasterxml.jackson.jaxrs.xml.JacksonJaxbXMLProvider</param-value>
    </init-param>
    <!--Enable to log request/responces-->
    <!--<init-param>-->
    <!--<param-name>com.sun.jersey.spi.container.ContainerRequestFilters</param-name>-->
    <!--<param-value>com.sun.jersey.api.container.filter.LoggingFilter</param-value>-->
    <!--</init-param>-->
    <!--<init-param>-->
    <!--<param-name>com.sun.jersey.spi.container.ContainerResponseFilters</param-name>-->
    <!--<param-value>com.sun.jersey.api.container.filter.LoggingFilter</param-value>-->
    <!--</init-param>-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>JerseyREST</servlet-name>
    <url-pattern>/rest_v2/*</url-pattern>
  </servlet-mapping>
  <!--REST support END-->
  <!--App Themes START-->
  <servlet>
    <servlet-name>AppThemeServlet</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.war.themes.ThemeResolverServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>AppThemeServlet</servlet-name>
    <url-pattern>/_themes/*</url-pattern>
  </servlet-mapping>
  <!--App Themes END-->
  <servlet>
    <servlet-name>ResourceForwardingServlet</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.war.ResourceForwardingServlet</servlet-class>
    <init-param>
      <param-name>forwardWhitelist</param-name>
      <param-value>
        <!--Comma separated list of the directories and resources where forwarding is permitted.-->
        /scripts,
                /optimized-scripts,
                /themes,
                /rest_v2/bundles,
                /rest_v2/settings,
                /JavaScriptServlet,
                /getRequirejsConfig.html,
                /reportresource,
                /wcf,
                /fusion
      </param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>ResourceForwardingServlet</servlet-name>
    <url-pattern>/runtime/*</url-pattern>
  </servlet-mapping>
  <servlet>
    <description>Returns a key for the URL parameter encryption
            in javascript via JCryption</description>
    <servlet-name>JavascriptEncryptionKey</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.api.security.encryption.GetEncryptionKey</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>JavascriptEncryptionKey</servlet-name>
    <url-pattern>/GetEncryptionKey</url-pattern>
  </servlet-mapping>
  <!--CSRFGuard Servlet-->
  <servlet>
    <description>GET: returns jrs.csrfguard.js, which injects CSRF token on the page.
            POST: returns CSRF token when requested from jrs.csrfguard.js
            JavaScriptServlet is further configured in jrs.csrfguard.properties</description>
    <servlet-name>CSRFGuard.JavaScriptServlet</servlet-name>
    <servlet-class>com.jaspersoft.jasperserver.api.security.csrf.JSJavaScriptServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>CSRFGuard.JavaScriptServlet</servlet-name>
    <url-pattern>/JavaScriptServlet</url-pattern>
  </servlet-mapping>
  <session-config>
    <!--Default to 20 minute session timeouts-->
    <session-timeout>20</session-timeout>
  </session-config>
  <jsp-config>
    <taglib>
      <taglib-uri>/WEB-INF/jasperserver.tld</taglib-uri>
      <taglib-location>/WEB-INF/jasperserver.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>/spring</taglib-uri>
      <taglib-location>/WEB-INF/spring.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://www.tonbeller.com/wcf</taglib-uri>
      <taglib-location>/WEB-INF/wcf/wcf-tags.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://www.tonbeller.com/jpivot</taglib-uri>
      <taglib-location>/WEB-INF/jpivot/jpivot-tags.tld</taglib-location>
    </taglib>
  </jsp-config>
  <resource-ref>
    <description>JasperServer Metadata repository</description>
    <res-ref-name>jdbc/jasperserver</res-ref-name>
    <res-type>javax.sql.ConnectionPoolDataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  <resource-ref>
    <description>SugarCRM example database</description>
    <res-ref-name>jdbc/sugarcrm</res-ref-name>
    <res-type>javax.sql.ConnectionPoolDataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  <resource-ref>
    <description>Foodmart database</description>
    <res-ref-name>jdbc/foodmart</res-ref-name>
    <res-type>javax.sql.ConnectionPoolDataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>
  <welcome-file-list>
    <welcome-file>index.htm</welcome-file>
  </welcome-file-list>
  <mime-mapping>
    <extension>xsd</extension>
    <mime-type>text/xml</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>png</extension>
    <mime-type>image/png</mime-type>
  </mime-mapping>
  <security-constraint>
    <web-resource-collection>
      <web-resource-name>JasperServerWebApp</web-resource-name>
      <url-pattern>/*</url-pattern>
    </web-resource-collection>
    <user-data-constraint>
      <!--SSL disabled-->
      <transport-guarantee>NONE</transport-guarantee>
      <!--SSL enabled
            <transport-guarantee>CONFIDENTIAL</transport-guarantee>-->
    </user-data-constraint>
  </security-constraint>
  <!--This constraint disables the listed HTTP methods, which are not used by JS
	<security-constraint>
		<web-resource-collection>
			<web-resource-name>Forbidden</web-resource-name>
			<url-pattern>/*</url-pattern>
			<http-method>HEAD</http-method>
			<http-method>CONNECT</http-method>
			<http-method>COPY</http-method>
			<http-method>LOCK</http-method>
			<http-method>MKCOL</http-method>
			<http-method>OPTIONS</http-method>
			<http-method>PATCH</http-method>
			<http-method>PROPFIND</http-method>
			<http-method>PROPPATCH</http-method>
			<http-method>SEARCH</http-method>
			<http-method>TRACE</http-method>
			<http-method>UNLOCK</http-method>
		</web-resource-collection>
	</security-constraint>-->
  <error-page>
    <error-code>404</error-code>
    <location>/404.html</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/500.html</location>
  </error-page>
  <mime-mapping>
    <extension>ico</extension>
    <mime-type>image/x-icon</mime-type>
  </mime-mapping>
  <!--Web fonts MIME types declaration-->
  <mime-mapping>
    <extension>svg</extension>
    <mime-type>image/svg+xml</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>ttf</extension>
    <mime-type>application/x-font-truetype</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>eot</extension>
    <mime-type>application/vnd.ms-fontobject</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>woff</extension>
    <mime-type>application/font-woff</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>woff2</extension>
    <mime-type>application/font-woff2</mime-type>
  </mime-mapping>
  <mime-mapping>
    <extension>otf</extension>
    <mime-type>application/font-sfnt</mime-type>
  </mime-mapping>
  <!--End of web fonts-->
</web-app>