Description: >
    TIBCO JasperReports Server BYOL 7.2.0 for Docker.

    This template builds a base TIBCO JasperReports Server BYOL docker image, creates an ECR repo with name 'jasperserver-pro' and pushes base docker images into the ECR repo.
    This template also provides you an option to create an S3 bucket and folder structure inside the bucket required for base docker image customization.
    If you update this template for another JasperReports Server version, change the AWSRegionToAMI and the JasperReportsServerVersion in the UserData below.
    Copyright 2019-2020, TIBCO Software Inc. All Rights Reserved.

Parameters:


    KeyName:
        Description: Select an existing key pair. You must provide existing key pair to be able to SSH into EC2 instances.
        Type: AWS::EC2::KeyPair::KeyName
        MinLength: 1
        MaxLength: 64
        AllowedPattern: '[-_ a-zA-Z0-9]*'
        ConstraintDescription: Must be the name of an existing key pair. It can contain only alphanumeric characters, spaces, dashes and underscores.

    ExtBucketName:
        Description: Provide name for S3 bucket. If blank, one will be created for you.
        Type: String
        MaxLength: 63
        ConstraintDescription: Must comply with AWS S3 bucket naming convention.
        
    JasperReportsServerVersion:
        Description: In the AMI you are using. Update AMI and this version number.
        Type: String
        MinLength: 1
        MaxLength: 63
        Default: '7.2.0'
        ConstraintDescription: Should be a proper version number.

    VPCID:
      Type: 'AWS::EC2::VPC::Id'
      Description: VpcId of your existing Virtual Private Cloud (VPC)
      MinLength: 1
      MaxLength: 64

    PrivateSubnet:
      Description: ID of private subnet for the image creation Workload
      Type: 'AWS::EC2::Subnet::Id'

Metadata: 
    AWS::CloudFormation::Interface: 
      ParameterGroups: 
        - 
          Label: 
            default: "Network"
          Parameters:
            - VPCID
            - PrivateSubnet
        - 
          Label: 
            default: "Bucket"
          Parameters:
            - ExtBucketName
      ParameterLabels:
        ExtBucketName:
            default: "S3 Bucket Name:"

Conditions:
    HasKeyName: !Not [!Equals [!Ref KeyName, ""]]

Mappings:

  AWSRegionAMI:
    us-east-1:
      '64': ami-06f91cd7d5536aed2
    us-east-2:
      '64': ami-07f4e1c328364f8e4
    us-west-1:
      '64': ami-0f9f10a52ce57e08a
    us-west-2:
      '64': ami-0702731f9db377eb3
    ca-central-1:
      '64': ami-0d62d0215cb127fde
    eu-central-1:
      '64': ami-03416724bb8fbcb29
    eu-west-1:
      '64': ami-04ffae4f29bb4704c
    eu-west-2:
      '64': ami-07db901a8a06212e3
    eu-west-3:
      '64': ami-065a2eb9e4e60fb03
    eu-north-1:
      '64': ami-d255deac
    ap-southeast-1:
      '64': ami-09e028879b48bdf8e
    ap-southeast-2:
      '64': ami-0133968d004c2627a
    ap-south-1:
      '64': ami-05984a0227a13875e
    ap-northeast-1:
      '64': ami-0a707cd6956f3d8a0
    ap-northeast-2:
      '64': ami-0bfcf731282d1dde2
    sa-east-1:
      '64': ami-09383944bc61d70b5


Resources:

#################### EC2 Instance for pushing JasperReports Server base images to ECR ####################

    FirstEC2Instance:
        Type: AWS::EC2::Instance
        Properties:
            ImageId: !FindInMap 
              - AWSRegionAMI
              - !Ref 'AWS::Region'
              - '64'
            InstanceType: t2.medium
            KeyName: !If [HasKeyName, !Ref KeyName, !Ref "AWS::NoValue"]
            BlockDeviceMappings: 
              - DeviceName: "/dev/xvda"
                Ebs: 
                  VolumeSize: "10"
            IamInstanceProfile: !Ref ECSInstanceProfile
            InstanceInitiatedShutdownBehavior: stop
            SubnetId: !Ref PrivateSubnet
            UserData: 
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    echo 'JasperReports Server-Containers-AWS: Start of EC2 Instance UserData execution...'
                    echo "Install Docker..."
                    sudo yum update
                    sudo yum -y install docker
                    sudo service docker start
                    #sudo usermod -aG docker $USER
                    
                    echo "Installing JasperReports Server images for version ${JasperReportsServerVersion}"
                    cd /usr/share/jrs_dist/
                    wget "https://raw.githubusercontent.com/TIBCOSoftware/js-docker/master/Dockerfile-exploded" -O Dockerfile-exploded --no-verbose
                    wget "https://raw.githubusercontent.com/TIBCOSoftware/js-docker/master/Dockerfile-s3-config-load" -O Dockerfile-s3-config-load --no-verbose
                    mkdir scripts
                    cd scripts
                    wget "https://raw.githubusercontent.com/TIBCOSoftware/js-docker/master/scripts/entrypoint.sh" -O entrypoint.sh --no-verbose
                    wget "https://raw.githubusercontent.com/TIBCOSoftware/js-docker/master/scripts/entrypoint-aws.sh" -O entrypoint-aws.sh --no-verbose
                    cd ..
                    docker build -f Dockerfile-exploded --build-arg HTTP_PORT=80 --build-arg HTTPS_PORT=443 -t jasperserver-pro:${JasperReportsServerVersion} .
                    docker build -f Dockerfile-s3-config-load --build-arg JasperReportsServerVersion=${JasperReportsServerVersion} -t jasperserver-pro:aws-${JasperReportsServerVersion} .

                    echo 'ECR login...'
                    $( aws ecr get-login --region ${AWS::Region} --no-include-email )
                    if aws ecr describe-repositories --region ${AWS::Region} --repository-names jasperserver-pro | grep repositoryUri; then
                        echo 'jasperserver-pro ECR Repository already exists, skipping repository creation...'
                    else 
                        echo 'jasperserver-pro ECR Repository does not exist, creating...'
                        aws ecr create-repository --region ${AWS::Region} --repository-name jasperserver-pro
                    fi

                    echo 'Tagging and pushing to ECR...'
                    docker tag jasperserver-pro:${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:${JasperReportsServerVersion}
                    docker tag jasperserver-pro:aws-${JasperReportsServerVersion} ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:aws-${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:${JasperReportsServerVersion}
                    docker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/jasperserver-pro:aws-${JasperReportsServerVersion}

                    if aws s3api get-bucket-location --bucket ${ExtBucketName} | grep LocationConstraint; then
                        echo "S3 Bucket ${ExtBucketName} already exists, skipping bucket creation..."
                    else 
                        echo "Creating S3 Bucket ${ExtBucketName}..."
                        aws s3 mb s3://${ExtBucketName}
                    fi
                    aws s3api put-object --bucket ${ExtBucketName} --key default-master/
                    aws s3api put-object --bucket ${ExtBucketName} --key license/
                    aws s3api put-object --bucket ${ExtBucketName} --key keystore/
                    aws s3api put-object --bucket ${ExtBucketName} --key customization/
                    aws s3api put-object --bucket ${ExtBucketName} --key tomcat-customization/
                    echo 'JasperReports Server-Containers-AWS: End of EC2 Instance UserData execution, shutting down...'
                    sudo poweroff

    # This IAM Role is attached to all of the ECS hosts.
    # Please note that this role will be used by ALL containers running on the ECS host.
    ECSRole:
        Type: AWS::IAM::Role
        Properties: 
            Path: /
            RoleName: !Sub ${AWS::StackName}-ECSRole-${AWS::Region}
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": { 
                            "Service": "ec2.amazonaws.com" 
                        }
                    }]
                }
            Policies: 
                - PolicyName: ecs-service
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "ecs:*",
                                "ecs:DeregisterContainerInstance",
                                "ecs:DiscoverPollEndpoint",
                                "ecs:Poll",
                                "ecs:RegisterContainerInstance",
                                "ecs:StartTelemetrySession",
                                "ecs:UpdateContainerInstancesState",
                                "ecs:Submit*",
                                "aws-marketplace:MeterUsage",
                                "ec2:AuthorizeSecurityGroupIngress",
                                "ec2:Describe*",
                                "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                "elasticloadbalancing:DeregisterTargets",
                                "elasticloadbalancing:Describe*",
                                "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                "elasticloadbalancing:RegisterTargets",
                                "ecr:*",
                                "s3:*",
                                "logs:*"
                            ],
                            "Resource": "*"
                        }]
                    }

    ECSInstanceProfile: 
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles: 
                - !Ref ECSRole

#################### Output Section ####################
Outputs:

    ECR:
        Description: A reference to the Amazon ECR (Amazon EC2 Container Registry).
        Value: !Sub "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/repositories/jasperserver-pro#images"

    S3Bucket:
        Description: A reference to the S3 Bucket which will be used for customizing base image.
        Value: !Sub "https://console.aws.amazon.com/s3/home?region=${AWS::Region}&bucket=${ExtBucketName}"