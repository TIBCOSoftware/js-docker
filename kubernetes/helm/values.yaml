## Global Docker image registry
## Please, note that this will override the image registry for all the images, including dependencies, configured to use the global value
##
# global:
#   imageRegistry:

## JasperReports Server Pro image version
##
image:
  registry: 292091044203.dkr.ecr.us-east-2.amazonaws.com
  repository: jasperserver-pro
  tag: aws-7.2.0
  ## Specify a imagePullPolicy
  ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: Always

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistryKeySecretName

##
## Repository database configuration
##
repositoryDatabase:
  ## Database host
  host: jrza245ynujevw.cnu7euoanov2.us-west-2.rds.amazonaws.com

  ## Database host
  port: 5432

  ## Database user
  #user: jaspersoft
  user: postgres

  ## Database password
  #password: jasperjasper
  password: postgres

  ## Database name
  database: jasperserver-pro-7.2


## For minikube, set this to NodePort, elsewhere use LoadBalancer
##
service:
  type: LoadBalancer
  port: 80
  targetPort: 80
  httpsPort: 443
  httpsTargetPort: 443
  annotations:
# only if internal
#    service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"

  
jmsCacheService:
  enabled: true
  port: 61616
  image: rmohr/activemq:5.15.9-alpine

repository:
  regen: true
  loadSamples: true

ingress:
  enabled: false

# enable for a Postgresql repository in the deployment
postgresql:
  enabled: true
  postgresqlUsername: postgres
  postgresqlPassword: postgres
  persistence:
    enabled: true
    size: 10Gi

jasperReportsServerContainer:
  aws:
    ## S3 bucket for configuration
    s3ConfigBucket: jrs-eks-7.2.0
    
  http:
    containerPort: 80
  https:
    containerPort: 443

  replicaCount: 1

# enable if you want to use mounted volume with the JasperReports Server containers
  mount:
    enabled: false
    #  volume: a PersistentVolumeClaim
    # for jasperreports-server-pro-volume.fullname and jasperreports-server-pro-volume.name in _helpers.tpl
    # fullVolumeOverride: full name of the volume
    # volumeOverride: fullname - Release.Name-nameOverride, name override or Chart.Name 
 
    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    ## database data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    storageClass: "-"
    accessMode: ReadWriteOnce
    size: 8Gi

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
  resources:
    requests:
      memory: 4096Mi
      cpu: 300m
